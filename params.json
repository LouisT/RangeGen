{"name":"RangeGen","tagline":"Generate a range between two numbers or letters. Examples: 1-100, a-z, A-Z, a-zz or even A-ZZZZZ.","body":"RangeGen (v0.2.7)\r\n======\r\n\r\nInstall: npm install [rangegen](https://www.npmjs.org/package/rangegen \"Title\")\r\n\r\nThis project is [Unlicensed](http://unlicense.org/ \"Title\").\r\nIn other words, I don't care what you do with it.\r\nHowever, if you make something interesting, I would like to check it out.\r\n\r\nInformation:\r\n------\r\nGenerate a range between two numbers or letters. Examples: 1-100, a-z, A-Z, a-zz or even A-ZZZZZ.\r\n\r\nOnline example: [http://louist.github.io/RangeGen/example.html](http://louist.github.io/RangeGen/example.html \"Title\")\r\n\r\nView more examples on [GitHub](https://github.com/LouisT/RangeGen/tree/master/examples \"Title\").\r\n\r\nUsage:\r\n-------\r\n    *WARNING* Running range on a big letter gap causes MANY loops!\r\n              For instance, a-zzzzz creates an array with 12,356,630\r\n              indexes and does 73,645,526 while and for loops!\r\n\r\n    -- Array generator (See \"examples.js\" for usage) --\r\n    var array = RangeGen(<from>,<to>,[<step>[,<exceptions>[,<CB/filter>]]]);\r\n\r\n        From         - The letter or number to start the range at. (Number, Float, Letters)\r\n        To           - The letter or number to end on/near. (Number, Float, Letters)\r\n        Step*        - The amount to increment or decrement by. Default, 1. (Boolean, Number, Float)\r\n        Exceptions*  - Throw error messages. Default, return an empty array. (Boolean)\r\n        CB/filter*   - Use a callback or filter results. (see example4.js)\r\n                     * Optional.\r\n\r\n    -- Check to see if a number or letter is in a range. (Case sensitive, \"AB\" is not in \"a..az\". See \"examples4.js\" for usage) --\r\n    RangeGen.inRange(<str>,<from>,<to>[,<step>[,<exceptions>[,<callback>]]]);\r\n\r\n        Str          - The number(s) or letter(s) to validate. (Number, Float, Letters)\r\n        From         - The letter or number to start the range at. (Number, Float, Letters)\r\n        To           - The letter or number to end on/near. (Number, Float, Letters)\r\n        Step*        - The amount to increment or decrement by. Default, 1. (Boolean, Number, Float)\r\n        Exceptions*  - Throw error messages. Default, return false. (Boolean)\r\n        Callback*    - Use a callback instead of return.\r\n                     * Optional.\r\n\r\n    -- Get the Nth value in a given range. (See \"examples4.js\" for usage) --\r\n    RangeGen.byIndex(<num>,<from>,<to>,[<step>[,<exceptions>[,<callback>]]]);\r\n\r\n        Num          - The index number within the range. (Number)\r\n        From         - The letter or number to start the range at. (Number, Float, Letters)\r\n        To           - The letter or number to end on/near. (Number, Float, Letters)\r\n        Step*        - The amount to increment or decrement by. Default, 1. (Boolean, Number, Float)\r\n        Exceptions*  - Throw error messages. Default, return false. (Boolean)\r\n        Callback*    - Use a callback instead of return.\r\n                     * Optional.\r\n\r\n    -- Get the index by value in a given range. (See \"examples4.js\" for usage) --\r\n    RangeGen.byValue(<str>,<from>,<to>,[<step>[,<exceptions>[,<callback>]]]);\r\n\r\n        Str          - The value within the range. (Number, Float, Letters)\r\n        From         - The letter or number to start the range at. (Number, Float, Letters)\r\n        To           - The letter or number to end on/near. (Number, Float, Letters)\r\n        Step*        - The amount to increment or decrement by. Default, 1. (Boolean, Number, Float)\r\n        Exceptions*  - Throw error messages. Default, return false. (Boolean)\r\n        Callback*    - Use a callback instead of return.\r\n                     * Optional.\r\n\r\n    -- Inject \"range()\" into the String prototype. (See \"examples4.js\" for usage) --\r\n    RangeGen.addPrototype();\r\n    RangeGen.addPro();\r\n\r\n        Usage: \"FROM..TO\".range([<step>[,<exceptions>[,<callback>]]]);\r\n\r\n        From         - The letter or number to start the range at. (Number, Float, Letters)\r\n        To           - The letter or number to end on/near. (Number, Float, Letters)\r\n        Step*        - The amount to increment or decrement by. Default, 1. (Boolean, Number, Float)\r\n        Exceptions*  - Throw error messages. Default, return false. (Boolean)\r\n        Callback*    - Use a callback instead of return.\r\n                     * Optional.\r\n\r\n    -- Readable stream. (Node.js ONLY, See examples5.js for usage) --\r\n    var stream = RangeGen.createReadStream(<from>,<to>[,<step>]);\r\n                 RangeGen.CRS(<from>,<to>[,<step>]);\r\n\r\n        From         - The letter or number to start the range at. (Number, Float, Letters)\r\n        To           - The letter or number to end on/near. (Number, Float, Letters)\r\n        Step*        - The amount to increment or decrement by. Default, 1. (Boolean, Number, Float)\r\n\r\n        NOTE: If you use this outside of Node.js it will throw a \"NodeOnly\" error!\r\n              Stream API: http://nodejs.org/api/stream.html#stream_class_stream_readable\r\n\r\n    -- Iterators. (See \"examples2.js\" for usage) --\r\n    var iterator = RangeGen.iterator(<from>,<to>[,<step>[,<exceptions>]]);\r\n                   RangeGen.iter(<from>,<to>[,<step>[,<exceptions>]]);\r\n\r\n        hasNext()    - Returns true if the iteration has more elements.\r\n        next()       - Returns the next element in the iteration, or false if `exceptions` is not set.\r\n                       Otherwise throws a `NoSuchElement` exception.\r\n        length       - The total number of iterations.\r\n        left         - The number of iterations left.\r\n","google":"UA-23469607-5","note":"Don't delete this file! It's used internally to help with page regeneration."}