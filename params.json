{"name":"RangeGen","tagline":"Generate a range between two numbers or letters. Examples: 1-100, a-z, A-Z, a-zz or even A-ZZZZZ.","body":"RangeGen (v0.2.2)\r\n======\r\n\r\nInstall: npm install rangegen\r\n\r\nThis project is [Unlicensed](http://unlicense.org/ \"Title\").\r\nIn other words, I don't care what you do with it.\r\nHowever, if you make something interesting, I would like to check it out.\r\n\r\nInformation:\r\n------\r\nGenerate a range between two numbers or letters. Examples: 1-100, a-z, A-Z, a-zz or even A-ZZZZZ.\r\nExample: [http://louist.github.io/RangeGen/example.html](http://louist.github.io/RangeGen/example.html \"Title\")\r\n\r\nUsage:\r\n-------\r\n    *WARNING* Running range on a big letter gap causes MANY loops!\r\n              For instance, a-zzzzz creates an array with 12,356,630\r\n              indexes and does 73,645,526 while and for loops!\r\n\r\n    -- Array generator (See \"examples.js\" for usage) --\r\n    var array = RangeGen(<from>,<to>,[<step>[,<exceptions>]]);\r\n\r\n        From         - The letter or number to start the range at. (Number, Float, Letters)\r\n        To           - The letter or number to end on/near. (Number, Float, Letters)\r\n        Step*        - The amount to increment or decrement by. Default, 1. (Boolean, Number, Float)\r\n        Exceptions*  - Throw error messages. Default, return an empty array. (Boolean);\r\n                     * Optional.\r\n\r\n    -- Iterators (See \"examples2.js\" for usage) --\r\n    var iterator = RangeGen.iterator(<from>,<to>[,<step>[,<exceptions>]]);\r\n                   RangeGen.iter(<from>,<to>[,<step>[,<exceptions>]])\r\n\r\n        hasNext()    - Returns true if the iteration has more elements.\r\n        next()       - Returns the next element in the iteration, or false if `exceptions` is not set.\r\n                       Otherwise throws a `NoSuchElement` exception.\r\n        length       - The total number of iterations.\r\n        left         - The number of iterations left.\r\n\r\n\r\nExamples:\r\n-------\r\n```javascript\r\nvar RangeGen = require('rangegen');\r\ntry {\r\n   var a = RangeGen(\"a\",\"z\");\r\n   console.log(\"[a-z] \"+a.join(\",\")+\"\\n\");\r\n   var b = RangeGen(\"z\",\"a\");\r\n   console.log(\"[z-a] \"+b.join(\",\")+\"\\n\");\r\n   var c = RangeGen(\"A\",\"ZZ\",10);\r\n   console.log(\"[A-ZZ,10] \"+c.join(\",\")+\"\\n\");\r\n   var d = RangeGen(\"ZZ\",\"A\",10);\r\n   console.log(\"[ZZ-A,10] \"+d.join(\",\")+\"\\n\");\r\n   var e = RangeGen(0,100,10);\r\n   console.log(\"[0-100,10] \"+e.join(\",\")+\"\\n\");\r\n   var f = RangeGen(100,0,10);\r\n   console.log(\"[100-0,10] \"+f.join(\",\")+\"\\n\");\r\n   var g = RangeGen(0,1,0.1);\r\n   console.log(\"[0-1,0.1] \"+g.join(\",\")+\"\\n\");\r\n   var h = RangeGen(1,0,0.1);\r\n   console.log(\"[1-0,0.1] \"+h.join(\",\")+\"\\n\");\r\n } catch (e) {\r\n   console.log(e);\r\n};\r\nconsole.log(\"\\n--- Throw errors! ---\");\r\ntry {\r\n   RangeGen(\"a\",100,1,true);\r\n } catch (e) {\r\n   console.log(\"[a-100] \"+e+\"\\n\");\r\n};\r\ntry {\r\n   RangeGen(100,\"z\",1,true);\r\n } catch (e) {\r\n   console.log(\"[100-a] \"+e+\"\\n\");\r\n};\r\ntry {\r\n   console.log(RangeGen(\"@\",\"!\",1,true));\r\n } catch (e) {\r\n   console.log(\"[@-!] \"+e+\"\\n\");\r\n};\r\ntry {\r\n   console.log(RangeGen(\"a\",\"!\",1,true));\r\n } catch (e) {\r\n   console.log(\"[a-!] \"+e+\"\\n\");\r\n};\r\nconsole.log(\"\\n--- Return empty arrays! ---\");\r\nconsole.log(RangeGen(\"a\",\"100\"));\r\nconsole.log(RangeGen(\"100\",\"z\"));\r\nconsole.log(RangeGen(\"@\",\"!\"));\r\nconsole.log(RangeGen(\"a\",\"!\"));\r\n```\r\n```javascript\r\nvar RangeGen = require('rangegen');\r\ntry {\r\n   var iterator = RangeGen.iter(-30,30,1,true);\r\n   console.log(\"Iterations: \"+iterator.length);\r\n   var range = [];\r\n   while (iterator.hasNext()) {\r\n         range.push(iterator.next());\r\n   };\r\n   console.log(range.join(','));\r\n   var iterator = RangeGen.iter(0,1,0.1,true);\r\n   console.log(\"Iterations: \"+iterator.length);\r\n   var range = [];\r\n   while (iterator.hasNext()) {\r\n         range.push(iterator.next());\r\n   };\r\n   console.log(range.join(','));\r\n } catch (e) {\r\n   console.log(e);\r\n};\r\nconsole.log(\"\\n--- Throw errors! ---\");\r\ntry {\r\n   console.log(\"- Invalid next() call. -\");\r\n   var iterator = RangeGen.iterator(-30,30,1,true);\r\n   console.log(\"Iterations: \"+iterator.length);\r\n   var range = [];\r\n   while (iterator.hasNext()) {\r\n         range.push(iterator.next());\r\n   };\r\n   iterator.next();\r\n } catch (e) {\r\n   console.log(e);\r\n};\r\ntry {\r\n   console.log(\"\\n- Inalid range. [a-30] -\");\r\n   var iterator = RangeGen.iterator(\"a\",30,1,true);\r\n } catch (e) {\r\n   console.log(e);\r\n};\r\nconsole.log(\"\\n--- Return false! ---\");\r\ntry {\r\n   var iterator = RangeGen.iterator(\"a\",30,1);\r\n   if (!iterator) {\r\n      console.log(\"`iterator` is false!\");\r\n   }\r\n } catch (e) {\r\n   console.log(e);\r\n};\r\n```\r\n```html\r\n<html>\r\n<head>\r\n<title>RangeGen test</title>\r\n<script src=\"./rangegen.js\"></script>\r\n<script>\r\nwindow.onload = function () {\r\n     try {\r\n        var a = RangeGen(\"a\",\"z\");\r\n        output(\"[a-z] \"+a.join(\",\")+\"\\n\");\r\n        var b = RangeGen(\"z\",\"a\");\r\n        output(\"[z-a] \"+b.join(\",\")+\"\\n\");\r\n        var c = RangeGen(\"A\",\"ZZ\",10);\r\n        output(\"[A-ZZ,10] \"+c.join(\",\")+\"\\n\");\r\n        var d = RangeGen(\"ZZ\",\"A\",10);\r\n        output(\"[ZZ-A,10] \"+d.join(\",\")+\"\\n\");\r\n        var e = RangeGen(0,100,10);\r\n        output(\"[0-100,10] \"+e.join(\",\")+\"\\n\");\r\n        var f = RangeGen(100,0,10);\r\n        output(\"[100-0,10] \"+f.join(\",\")+\"\\n\");\r\n        var g = RangeGen(0,1,0.1);\r\n        output(\"[0-1,0.1] \"+g.join(\",\")+\"\\n\");\r\n        var h = RangeGen(1,0,0.1);\r\n        output(\"[1-0,0.1] \"+h.join(\",\")+\"\\n\");\r\n      } catch (e) {\r\n        output(e);\r\n     };\r\n     try {\r\n        var iterator = RangeGen.iter(-30,30,5,true);\r\n        output(\"<br />Iterations: \"+iterator.length);\r\n        var range = [];\r\n        while (iterator.hasNext()) {\r\n              range.push(iterator.next());\r\n        };\r\n        output(range.join(','));\r\n      } catch (e) {\r\n        output(e);\r\n     };\r\n};\r\nfunction output (x) {\r\n         document.getElementById(\"output\").innerHTML += x+\"<br />\";\r\n};\r\n</script>\r\n</head>\r\n<body>\r\n<div id=\"output\"></div>\r\n</body>\r\n</html>\r\n```\r\n\r\n\r\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/LouisT/rangegen/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\r\n\r\n","google":"UA-23469607-5","note":"Don't delete this file! It's used internally to help with page regeneration."}